user www-data;
error_log stderr warn;
pid /var/run/nginx.pid;

events {
  worker_connections 1024;
}

http {
  root /etc/nginx/html;
  include mime.types;
  include resolvers.conf;
  server_tokens off;

  log_format json escape=json
    '{'
    '"time":"$time_iso8601",'
    '"status":"$status",'
    '"proxyResponse":"$proxyResponse",'
    '"requestMethod":"$request_method",'
    '"requestUri":"$masked_request_uri",'
    '"bodyBytesSent":$body_bytes_sent,'
    '"requestTime":$request_time,'
    '"remoteAddr":"$remote_addr",'
    '"clientUser":"$clientUser",'
    '"xroadClient":"$xroadClient",'
    '"sslProtocol":"$ssl_protocol",'
    '"sslClientSubjectDn":"$ssl_client_s_dn",'
    '"sslClientVerify":"$ssl_client_verify",'
    '"sslClientCertificate":"$loggedSslClientCertificate"'
    '}';

  access_log /dev/stdout json;

  # don't complain if proxyResponse etc. (used in logging) are not yet initialized (happens for invalid requests)
  uninitialized_variable_warn off;

  gzip  on;

  map_hash_bucket_size 128;

  map $ssl_client_verify $loggedSslClientCertificate {
    "SUCCESS" "";
    "NONE" "";
    default "$ssl_client_raw_cert";
  }

  map $request_uri $masked_request_uri {
    "~^(?<u>.*)\b[0-9]{6}[-AaBbCcDdEeFfYyXxWwVvUu+][0-9]{3}[0-9A-Za-z]\b" "$u***********";
    default $request_uri;
  }

  server {
    listen 443 ssl;
    server_name localhost;
    ssl_certificate /etc/ssl/proxy.crt;
    ssl_certificate_key /etc/ssl/proxy.key;
    ssl_client_certificate /etc/nginx/ca-certificates.crt;
    ssl_verify_client optional;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_verify_depth 2;

    proxy_ssl_server_name on;
    proxy_buffering off;
    client_body_buffer_size 100k;

    set $proxyResponse "unknown";
    set $proxyMessage "";
    set $clientUser "";
    set $clientAuthorization "";
    set $xroadClient "";
    set $xAuth "";

    header_filter_by_lua_block {
      local config = require("luovutuspalvelu-config")
      if config.testLogging == true then
        ngx.header["X-Log"] = "proxyResponse=" .. ngx.var.proxyResponse
      end
    }

    location / {
      set $proxyResponse "notFound";
      return 404;
    }

    location = /koski-luovutuspalvelu/buildversion.txt {
      set $proxyResponse "ok";
    }

    location = /koski-luovutuspalvelu/healthcheck/proxy {
      set $proxyResponse "ok";
      return 200 "ok";
    }

    location = /robots.txt {
      set $proxyResponse "ok";
      return 200 "User-Agent: *\nDisallow: /\n";
    }

    error_page 495 /495.json;
    location /495.json {
      set $proxyResponse "unauthorized.sslCertificateError";
      return 400 "[{\"key\": \"unauthorized.sslCertificateError\", \"message\": \"$ssl_client_verify\"}]";
    }

    # to simplify log processing, treat plain HTTP (instead of HTTPS) as 404
    # (instead of 400 "The plain HTTP request was sent to HTTPS port")
    error_page 497 =404 /497.json;
    location /497.json {
      set $proxyResponse "notFound";
      return 404;
    }

    location ~ ^/koski(/valpas)?/api/(omadata-oauth2|luovutuspalvelu|palveluvayla)/ {
      proxy_read_timeout 180s;

      set_by_lua_block $koskiUrl {
        local config = require "luovutuspalvelu-config"
        return config.koskiUrl
      }

      set_by_lua_block $proxyResponse {
        local config = require "luovutuspalvelu-config"
        local iputils = require "iputils"
        local client
        for _, c in ipairs(config.clientList) do
          if ngx.var.ssl_client_s_dn == c.subjectDn then
            client = c
            break
          end
        end
        if ngx.var.ssl_client_verify == "NONE" then
          ngx.var.proxyMessage = "Varmenne puuttuu"
          return "unauthorized.clientCertificateRequired"
        elseif ngx.var.ssl_client_verify ~= "SUCCESS" then
          ngx.var.proxyMessage = ngx.var.ssl_client_verify
          return "unauthorized.sslCertificateError"
        elseif client == nil then
          ngx.var.proxyMessage = "Tuntematon varmenne: " .. ngx.var.ssl_client_s_dn
          return "unauthorized.unknownClientCertificate"
        elseif not iputils.ip_in_cidrs(ngx.var.remote_addr, client.ipsParsed) then
          ngx.var.proxyMessage = "Tuntematon IP-osoite: " .. ngx.var.remote_addr
          return "unauthorized.unknownIpAddress"
        else
          if string.find(ngx.var.request_uri, "/palveluvayla") then
            if client.xroadSecurityServer ~= true then
              return "unauthorized.xroadSecurityServerOnly"
            elseif ngx.var.request_method ~= "POST" then
              return "unauthorized.method"
            else
              ngx.var.clientUser = "__xroad"
            end
          else
            if string.find(ngx.var.request_uri, "/resource%-server") then
              ngx.var.xAuth = ngx.var.http_authorization
            end
            ngx.var.clientUser = client.user
          end
          return "proxied"
        end
      }

      rewrite_by_lua_block {
        local config = require "luovutuspalvelu-config"
        local xroadSoapUtil = require "xroad-soap-util"
        if ngx.var.clientUser == "__xroad" then
          local status, err = pcall(function ()
            ngx.req.read_body()
            ngx.var.xroadClient = xroadSoapUtil.parse_xroad_client_id(ngx.req.get_body_data())
            local client = config.xroadClients[ngx.var.xroadClient]
            if client == nil then
              ngx.var.proxyResponse = "unauthorized.unknownXroadClient"
              ngx.status = 403
              ngx.print('[{"key": "unauthorized.unknownXroadClient", "message": ""}]')
              ngx.exit(403)
            else
              ngx.var.clientUser = client.user
            end
          end)
          if not status then
            ngx.var.proxyResponse = "badRequest"
            ngx.log(ngx.ERR, err)
            ngx.exit(400)
          end
        end
        ngx.var.clientAuthorization = config.clientAuthorizations[ngx.var.clientUser]
        if ngx.var.clientAuthorization == nil or ngx.var.clientAuthorization == "" then
          ngx.var.proxyResponse = "internalError.missingPassword"
          ngx.status = 500
          ngx.print('[{"key": "internalError.missingPassword", "message": ""}]')
          ngx.exit(500)
        end
      }

      default_type application/json;
      if ($proxyResponse != "proxied") {
        return 403 "[{\"key\": \"$proxyResponse\", \"message\": \"$proxyMessage\"}]";
      }

      proxy_pass $koskiUrl;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Forwarded-For $remote_addr;
      proxy_set_header X-Auth $xAuth;
      proxy_set_header Authorization "Basic $clientAuthorization";
      proxy_set_header Forwarded "";
      proxy_set_header Cookie "";
      proxy_set_header Caller-Id "1.2.246.562.10.00000000001.koski-luovutuspalvelu-proxy";
    }
  }
}
