user www-data;
error_log stderr warn;
pid /var/run/nginx.pid;

events {
  worker_connections 1024;
}

http {
  root /etc/nginx/html;
  include mime.types;
  server_tokens off;

  log_format json escape=json
    '{'
    '"time":"$time_iso8601",'
    '"status":"$status",'
    '"proxyResponse":"$proxyResponse",'
    '"requestMethod":"$request_method",'
    '"requestUri":"$request_uri",'
    '"bodyBytesSent":$body_bytes_sent,'
    '"requestTime":$request_time,'
    '"remoteAddr":"$remote_addr",'
    '"clientUser":"$clientUser",'
    '"sslProtocol":"$ssl_protocol",'
    '"sslClientSubjectDn":"$ssl_client_s_dn",'
    '"sslClientVerify":"$ssl_client_verify",'
    '"sslClientCertificate":"$loggedSslClientCertificate"'
    '}';

  access_log /dev/stdout json;

  gzip  on;

  map_hash_bucket_size 128;

  map $ssl_client_s_dn $clientUser {
   {% for client in clientList -%}
     "{{ client.subjectDn }}" "{{ client.user }}";
   {% endfor %}
  }

  map $clientUser $clientAuthorization {
    include passwords.conf;
  }

  {% for client in clientList %}
    # {{Â client.subjectDn }}
    geo $remote_addr $clientIps{{loop.index}} {
      {% for ip in client.ips -%}
        {{ ip }} "yes";
      {% endfor -%}
    }
  {% endfor %}

  map $ssl_client_s_dn $clientIpAllowed {
    {% for client in clientList -%}
      "{{ client.subjectDn }}" $clientIps{{ loop.index }};
    {% endfor %}
  }

  map $ssl_client_verify $loggedSslClientCertificate {
    "SUCCESS" "";
    "NONE" "";
    default "$ssl_client_raw_cert";
  }

  map "$clientIpAllowed;$clientUser;$ssl_client_verify" $proxyResponse {
    "~;NONE$" "unauthorized.clientCertificateRequired";
    "~;FAILED.*$" "unauthorized.sslCertificateError";
    "~;;SUCCESS$" "unauthorized.unknownClientCertificate";
    "~^;.*;SUCCESS$" "unauthorized.unknownIpAddress";
    "~^yes;.+;SUCCESS$" "ok";
    default "unknown";
  }

  server {
    listen 443 ssl;
    server_name localhost;
    ssl_certificate /etc/ssl/proxy.crt;
    ssl_certificate_key /etc/ssl/proxy.key;
    ssl_client_certificate /etc/nginx/ca-certificates.crt;
    ssl_verify_client optional;
    ssl_protocols TLSv1.2 TLSv1.3;

    proxy_ssl_server_name on;
    proxy_buffering off;
    client_body_buffer_size 100k;

    {% if testLogging is defined and testLogging %}
    add_header X-Log "proxyResponse=$proxyResponse" always;
    {% endif %}

    location / {
      set $proxyResponse "notFound";
      return 404;
    }

    location = /koski-luovutuspalvelu/buildversion.txt {
      set $proxyResponse "ok";
    }

    location = /koski-luovutuspalvelu/healthcheck/proxy {
      set $proxyResponse "ok";
      return 200 "ok";
    }

    location = /robots.txt {
      set $proxyResponse "ok";
      return 200 "User-Agent: *\nDisallow: /\n";
    }

    error_page 495 /495.json;
    location /495.json {
      return 400 "[{\"key\": \"unauthorized.sslCertificateError\", \"message\": \"$ssl_client_verify\"}]";
    }

    # to simplify log processing, treat plain HTTP (instead of HTTPS) as 404
    # (instead of 400 "The plain HTTP request was sent to HTTPS port")
    error_page 497 =404 /497.json;
    location /497.json {
      set $proxyResponse "notFound";
      return 404;
    }

    location ~ ^/koski/api/(luovutuspalvelu|palveluvayla)/ {
      default_type application/json;
      if ($proxyResponse = "unauthorized.clientCertificateRequired") {
        return 403 "[{\"key\": \"$proxyResponse\", \"message\": \"Varmenne puuttuu\"}]";
      }
      if ($proxyResponse = "unauthorized.unknownClientCertificate") {
        return 403 "[{\"key\": \"$proxyResponse\", \"message\": \"Tuntematon varmenne: $ssl_client_s_dn\"}]";
      }
      if ($proxyResponse = "unauthorized.unknownIpAddress") {
        return 403 "[{\"key\": \"$proxyResponse\", \"message\": \"Tuntematon IP-osoite: $remote_addr\"}]";
      }
      if ($clientAuthorization = "") {
        set $proxyResponse "internalError.password";
        return 500 "[{\"key\": \"internalError.password\", \"message\": \"Salasana puuttuu.\"}]";
      }
      if ($proxyResponse != "ok") {
        return 500 "[{\"key\": \"internalError.state\", \"message\": \"Virheellinen tila.\"}]";
      }
      if ($proxyResponse = "ok") {
        set $proxyResponse "proxied";
      }
      proxy_pass {{ koskiUrl }};
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Forwarded-For $remote_addr;
      proxy_set_header Authorization "Basic $clientAuthorization";
      proxy_set_header Forwarded "";
      proxy_set_header Cookie "";
      proxy_set_header Caller-Id "1.2.246.562.10.00000000001.koski-luovutuspalvelu-proxy";
    }
  }
}
